#' @examples
flattenAlias <- function(aliasfilename){
#file is \t delim, with uneven numbers of columns which is a joy. We'll create
#a reverse flattened file here.
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
#Our output is close; it's still kind of a hot mess with alternative splicing
#and duplicates in here. Let's clean up as best we can.
#First, we're not catching any alternate splicing with these old probes so
#let's strip the splicing IDs
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
#collapse identical rows
output <- dplyr::distinct(output)
#some old genes are mapping to multiple new names; they need to be removed from our set.
output <- output[which(!duplicated(output[,1])),]
output
}
platdata <- platdata[which(length(platdata[,1] > 1)),]
platdata <- platdata[which(length(platdata[,1]) > 1),]
View(platdata)
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F)
platdata <- platdata[which(length(platdata[,1]) > 1),]
View(platdata)
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F)
View(platdata)
length(platdata[1,1])
nchar(platdata[1,1])
nchar(platdata[nrow(platdata),1])
platdata[nrow(platdata),1]
platdata <- platdata[which(grep("[a-zA-Z0-9]", platdata[,1]),]
if(method == "swap"){
output <- swapChange(platform)
} else if(method == "alias"){
if(!is.na(aliases)){
output <- aliasChange(platform, aliases)
}else{stop("No alias file provided for method alias")}
}else if(method == "blast"){
if(!is.na(transcripts)){
output <- blastChange(platform, transcripts, match, secmatch)
}else{stop("No transcript file provided for method blast")}
}else{stop("Invalid method provided, only supported methods are swap, alias and blast")}
output
}
aliasChange <- function(platform, aliases){
}
swapChange <- function(platform){
}
blastChange <- function(platform, transcripts, match, secmatch){
}
#' flattenAlias
#'
#' The alias file from PlasmoDB is unwieldy and awful. Here is a function for
#' flattening it for easier find and replace.
#'
#' @param aliasfilename File name of alias file obtained from PlasmoDB.
#'
#' @return Data frame with two columns; first column is old identifiers, and
#'   second column is their mapping to the most recent name (per the alias file)
#' @export
#'
#' @examples
flattenAlias <- function(aliasfilename){
#file is \t delim, with uneven numbers of columns which is a joy. We'll create
#a reverse flattened file here.
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
#Our output is close; it's still kind of a hot mess with alternative splicing
#and duplicates in here. Let's clean up as best we can.
#First, we're not catching any alternate splicing with these old probes so
#let's strip the splicing IDs
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
#collapse identical rows
output <- dplyr::distinct(output)
#some old genes are mapping to multiple new names; they need to be removed from our set.
output <- output[which(!duplicated(output[,1])),]
output
}
platdata <- platdata[which(grep("[a-zA-Z0-9]", platdata[,1])),]
platdata <- platdata[which(grepl("[a-zA-Z0-9]", platdata[,1])),]
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F)
platdata <- platdata[which(grepl("[a-zA-Z0-9]", platdata[,1])),]
View(platdata)
View(output)
length(unique(platdata[,1]))
View(platdata)
View(aliases)
View(platdata)
output <- platdata[,c("ID", "ORF_old")]
View(output)
output <- output[which(nchar(output[,2]) > 1,]
}
swapChange <- function(platdata){
}
blastChange <- function(platdata, transcripts, match, secmatch){
}
#' flattenAlias
#'
#' The alias file from PlasmoDB is unwieldy and awful. Here is a function for
#' flattening it for easier find and replace.
#'
#' @param aliasfilename File name of alias file obtained from PlasmoDB.
#'
#' @return Data frame with two columns; first column is old identifiers, and
#'   second column is their mapping to the most recent name (per the alias file)
#' @export
#'
#' @examples
flattenAlias <- function(aliasfilename){
#file is \t delim, with uneven numbers of columns which is a joy. We'll create
#a reverse flattened file here.
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
#Our output is close; it's still kind of a hot mess with alternative splicing
#and duplicates in here. Let's clean up as best we can.
#First, we're not catching any alternate splicing with these old probes so
#let's strip the splicing IDs
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
#collapse identical rows
output <- dplyr::distinct(output)
#some old genes are mapping to multiple new names; they need to be removed from our set.
output <- output[which(!duplicated(output[,1])),]
output
}
output <- output[which(nchar(output[,2]) > 1),]
View(output)
View(aliases)
test <- setkey(aliases$V1, aliases$V2)
aliasvector <- aliases[,2]
names(aliasvector) <- aliases[,1]
aliasvector[1]
output[,3] <- lapply(output[,2], function(x) {aliasvector[x]})
aliasvector[output[2,1]]
aliasvector[output[2,2]]
output[,3] <- lapply(output[,2], function(x) {unname(aliasvector[x])})
View(output)
output[1,3]
output[1,2]
output[,3] <- sapply(output[,2], function(x) {unname(aliasvector[x])})
View(output)
output <- output[which(!is.na(output[,3])),]
View(output)
output <- output[,c(1,3)]
View(output)
colnames(output) <- c("OldID", "NewID")
colnames(output) <- c("Probe", "NewID")
colnames(output) <- c("Probe", "GeneID")
View(output)
View(aliases)
View(platdata)
View(platdata)
output <- platdata[,c("ID", "ORF")]
View(output)
devtools::install_github("mhahsler/rBLAST")
devtools::install_github("mhahsler/rBLAST")
BiocManager::install("Biostrings")
devtools::install_github("mhahsler/rBLAST")
dbcmd <- paste("makeblastdb -in", transcripts, "-dbtype nucl")
transcripts <- "PlasmoDB-36_Pfalciparum3D7_AnnotatedTranscripts.fasta"
dbcmd <- paste("makeblastdb -in", transcripts, "-dbtype nucl")
system2(dbcmd)
dbcmd
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/PfalExpTools Testing")
dbcmd <- paste("makeblastdb -in", transcripts, "-dbtype nucl")
system2(dbcmd)
system(dbcmd)
View(platdata)
test <- as.data.frame(t(platdata), stringsAsFactors = F)
View(test)
test <- test[1:2,]
View(test)
test <- unlist(test)
test <- as.data.frame(test)
View(test)
probes <- platdata
View(platdata)
probes <- platdata[,1:2]
View(probes)
probes[,1] <- gsub("^", "^>", probes[,1])
View(probes)
probes[,1] <- gsub("^", ">", probes[,1])
View(probes)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- unlist(t(probes))
View(probes)
probes <- unlist(as.data.frame(t(probes), stringsAsFactors = F))
probes
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
View(probes)
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
test <- as.data.frame(unlist(test))
View(test)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- as.data.frame(t(probes), stringsAsFactors = F)
test <- as.data.frame(unlist(test))
View(test)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
View(test)
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
test <- unlist(probes)
test <- as.data.frame(test)
View(test)
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
probes <- unlist(probes)
filename <- paste(platform, ".fasta", sep = "")
write.delim(filename, probes)
write.table(filename, probes)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- as.data.frame(t(probes), stringsAsFactors = F)
probes <- as.data.frame(unlist(probes))
write.table(filename, probes)
write.table(probes, file = filename)
write.table(probes, file = filename, col.names = F, quote = F)
filename <- paste(gsub(".txt", "", platform), ".fasta", sep = "")
write.table(probes, file = filename, col.names = F, quote = F, row.names = F)
blastcmd <- paste("blastn -query", filename, "-db", transcripts, "-outfmt 10", sep = " ")
blastcmd
blastresults <- system(blastcmd)
system2(command = "makeblastdb", args = c("-in", transcripts, "-dbtype nucl"))
blastresults <- system2(command = "blastn", args = c("-query", filename,
"-db", transcripts,
"-outfmt", 10,
wait = T,
stdout = T))
blastresults <- system2(command = "blastn", args = c("-query", filename,
"-db", transcripts,
"-outfmt", 10),
wait = T,
stdout = T)
test <- read.table(textConnection(blastresults))
View(probes)
View(test)
test <- read.table(textConnection(blastresults), sep = ",")
View(test)
blastresults <- read.table(textConnection(blastresults), sep = ",")
blastresults <- blastresults[which(blastresults$V12 >= 60),]
View(blastresults)
duplicated(blastresults[,1])
blastresults <- blastresults[which(!duplicated(blastresults$V1)),]
length(unique(blastresults[,1]))
blastresults <- blastresults[which(blastresults$V12 >= match),]
blastresults$V12
match
match <- 130
blastresults <- blastresults[which(blastresults$V12 >= match),]
View(blastresults)
blastresults[,2] <-sapply(blastresults[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
output <- blastresults[,1:2]
colnames(output) <- c("Probe", "GeneID")
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/PfalExpTools Testing")
library(PFExpTools)
test <- nameChange("GPL18893.txt")
test <- nameChange("GPL18893.txt")
View(test)
output <- output[which(grepl("[a-zA-Z0-9]", output[,2])),]
library(PFExpTools)
test <- nameChange("GPL18893.txt")
View(test)
test <- nameChange("GPL18893.txt", method = "alias", aliases = "PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
aliases <- flattenAlias("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
aliases <- flattenAlias("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
test <- nameChange("GPL18893.txt", method = "alias", aliases = aliases)
View(test)
library(PFExpTools)
test <- nameChange("GPL18893.txt", method = "alias", aliases = aliases)
library(PFExpTools)
test <- nameChange("GPL18893.txt", method = "alias", aliases = aliases)
test <- nameChange("GPL18893.txt")
test <- nameChange("GPL18893.txt", method = "blast", transcripts = "PlasmoDB-36_Pfalciparum3D7_AnnotatedTranscripts.fasta")
View(test)
build_manual()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
build_manual()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/PfalExpTools Testing")
expfile <- "GSE59097_series_matrix.txt"
suppressWarnings(expdata <- read.table(expfile, skip = which.max(count.fields(expfile)) - 1,
sep = "\t",header = T, stringsAsFactors = F))
BiocManager::install("GEOquery")
expdata <- GEOquery::getGEO(filename = expfile)
expdata <- Table(expdata)
expdata <- GROquery::Table(expdata)
expdata <- GEOquery::Table(expdata)
expdata <- Biobase::Table(expdata)
expdata <- Biobase::Table(expdata)
expdata <- GEOquery::getGEO(filename = expfile)
expdata <- GEOquery::Table(expdata)
expdata <- GEOquery::Meta(expdata)
head(Meta(expdata))
expdata <- GEOquery::Table(expdata)
library(GEOquery)
expdata <- GEOquery::Table(expdata)
Meta(expdata)
expdata <- GEOquery::getGEO(filename = expfile)
Table(expdata)
Meta(expdata)
Columns(expdata)
GSMList(expdata)
summary(expdata)
expdata[[1]]
expdata[1]
expdata[[2]]
expdata[[3]]
expdata[[4]]
expdata[[10]]
expdata[[25]]
expdata[[260]]
expdata[[250]]
expdata[[50]]
expdata[[51]]
expdata[[52]]
expdata[[55]]
expdata[[60]]
expdata[[65]]
expdata[[64]]
expdata[[63]]
expdata[[60]]
expdata[[61]]
expdata[[62]]
expdata$phenoData
expdata["Phenodata"]
GSMList(expdata)
GSMList(expdata)[[1]]
GSMList(expdata)[[1]]
GSMList()
GDS2eSet(expdata)
expdata <- GEOquery::getGEO("GSE59097")
GDS2eSet(expdata)
expdata <- GEOquery::Table(expdata)
Meta(expdata)
GEOquery::Meta(expdata)
suppressWarnings(platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F))
suppressWarnings(expfile <- read.table(expfile, skip = which.max(count.fields(expfile)) - 1, sep = "\t",header = T, stringsAsFactors = F))
expdata <- getGEO(filename = "GSE59097_series_matrix.txt.gz", package = "GEOquery")
expdata <- getGEO(filename = "GSE59097_series_matrix.txt.gz")
expdata
expdata$featureData
expdata$data_row_count
exprs(expdata[[1]])
exprs[expdata[[1]]]
exprs(expdata)
test <- exprs(expdata)
View(test)
test <- Biobase::exprs(expdata)
library(PFExpTools)
namelist <- nameChange("GPL18893.txt", method = "swap")
names <- as.data.frame(rownames(expdata), stringsAsFactors = F)
View(names)
View(namelist)
namedict <- as.data.frame(namelist[,2])
namedict <- as.vector(namelist[,2])
names(namedict) <- namelist[,1]
namedict[1]
names[,2] <- sapply(names[,1], function(x) {unname(namedict[x])})
View(names)
names[,2] <- names[which(!is.na(names[,2])),]
names <- names[which(!is.na(names[,2])),]
rownames(names) <- names[,1]
names[,1] <- NULL
expdata <- merge(names, expdata, by = "row.names")
View(expdata)
View(names)
local = T
if(local == T){expdata <- GEOquery::getGEO(file = expfile)
}else{expdata <- GEOquery::getGEO(GEO = expname)}
expdata <- Biobase::exprs(expdata)
names <- as.data.frame(rownames(expdata), stringsAsFactors = F)
namedict <- as.vector(namelist[,2])
names(namedict) <- namelist[,1]
names[,2] <- sapply(names[,1], function(x) {unname(namedict[x])})
names <- names[which(!is.na(names[,2])),]
rownames(names) <- names[,1]
names[,1] <- NULL
View(names)
test <- merge(names, expdata, by = "row.names")
View(test)
expdata[5,5] + expdata[5,6]
expdata <- merge(names, expdata, by = "row.names")
expdata[,3:ncol(expdata)] <- sapply(expdata[,3:ncol(expdata)], function(x) as.numeric(x))
expdata[5,5] + expdata[5,6]
View(expdata)
averageddata <- expdata %>% dplyr::group_by(expdata$V2) %>% dplyr::summarize_all(mean, na.rm=TRUE)
averageddata <- expdata dplyr::%>% dplyr::group_by(expdata$V2) dplyr::%>% dplyr::summarize_all(mean, na.rm=TRUE)
averageddata <- expdata magrittr::%>% dplyr::group_by(expdata$V2) magrittr::%>% dplyr::summarize_all(mean, na.rm=TRUE)
averageddata <- expdata tidyr::%>% dplyr::group_by(expdata$V2) magrittr::%>% dplyr::summarize_all(mean, na.rm=TRUE)
library(magrittr)
averageddata <- expdata %>% group_by(expdata$V2) %>% dplyr::summarize_all(mean, na.rm=TRUE)
averageddata <- expdata %>% dplyr::group_by(expdata$V2) %>% dplyr::summarize_all(mean, na.rm=TRUE)
warnings()
View(averageddata)
rownames(averageddata) <- averageddata[,1]
View(averageddata)
output <- as.data.frame(output)
output <- expdata %>% dplyr::group_by(expdata$V2) %>% dplyr::summarize_all(mean, na.rm=TRUE)
output <- as.data.frame(output)
rownames(output) <- output[,1]
View(output)
output <- output[,-(1:3)]
View(output)
sum(is.na(output[1,]))
sum(!is.na(output[1,]))
sum(!is.na(output[1,]))/ncol(output)
output$coverage <- sapply(output, 1, function(x) {sum(!is.na(output[x,]))/ncol(output)})
output$coverage <- apply(output, 1, function(x) {sum(!is.na(output[x,]))/ncol(output)})
output$coverage <- apply(output, 1, function(x) {sum(!is.na(output[x,]))/ncol(output)})
coverage <- apply(output, 1, function(x) {sum(!is.na(output[x,]))/ncol(output)})
coverage <- apply(output, 1, function(x) {sum(!is.na(x))/ncol(output)})
output$coverage <- apply(output, 1, function(x) {sum(!is.na(x))/ncol(output)})
output <- output[which(output$coverage >= pct),]
pct <- 0.75
output <- output[which(output$coverage >= pct),]
output$coverage <- NULL
library(PFExpTools)
devtools::build_manual()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
devtools::build_manual()
library(PFExpTools)
devtools::build_manual()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/PfalExpTools Testing")
library(PFExpTools)
library(Biobase)
expdata <- GEOquery::getGEO("GSE59097")
test <- fData(expdata)
test <- fData(expdata)[[1]]
test <- fData(expdata)[[2]]
test <- experimentData(expdata)
test <- exprs(expdata)
test <- Biobase::exprs(expdata)
test <- GEOquery::exprs(expdata)
test <- GEOquery::exprs(expdata)[[1]]
test <- Biobase::exprs(expdata)[[1]]
featureData(expdata)
library(Biobase)
featureData(expdata)
Biobase::featureData(expdata)
Biobase::exprs(expdata)
expname <- "GSE59097"
test <- curateExpdata(expname)
expdata <- GEOquery::getGEO("GSE59097", local = F)
test <- curateExpdata(expname, local = F)
Biobase::exprs(expdata)
test <- curateExpdata(expname, local = F)
library(PFExpTools)
expdata <- GEOquery::getGEO("GSE59097")
Biobase::exprs(expdata)
exprs(expdata)
library(GEOquery)
exprs(expdata)
library(Biobase)
exprs(expdata)
class(expdata)
Meta(expdata)
view(expdata)
GSMList(expdata)
library(GEOquery)
GEOquery::GSMList(expdata)
expdata[[1]]
exprs(expdata[[1]])
expdata[[2]]
test <- exprs(expdata[[1]])
View(test)
expdata
test2 <- expdata[[1]]$assayData
test <- featureData(expdata[[1]])
test2 <- featureData(expdata[[1]])[[1]]
test2 <- featureData(expdata[[1]])[[1:5]]
test2 <- featureData(expdata[[1]])[[1:2]]
test2 <- featureData(expdata[[1]])[[2]]
test2 <- featureData(expdata[[1]])
test2 <- as(featureData(expdata[[1]]), "data.frame")
View(test2)
View(test2)
meta <- getGEO("GPL18893")
test3 <- meta[[1]]
test3 <- as(featureData(meta), "data.frame")
dataTable(meta)
test3 <- dataTable(meta)
test3 <- as(dataTable(meta), "data.frame")
test3 <- as(Table(meta), "data.frame")
View(test3)
