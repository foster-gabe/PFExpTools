smoothed <- predict(test)
output[i,] <- smoothed
}
View(expdata)
View(time)
expdata[1,]
View(expdata)
test <- loess(expdata[i,] ~ time, data = expdata, span = smoothvalue, na.action = na.exclude)
test <- loess(unlist(expdata[i,]) ~ time, data = expdata, span = smoothvalue, na.action = na.exclude)
for(i in 1:row(expdata)){
test <- loess(unlist(expdata[i,]) ~ time, data = expdata, span = smoothvalue, na.action = na.exclude)
smoothed <- predict(test)
output[i,] <- smoothed
}
View(output)
for(i in 1:nrow(expdata)){
test <- loess(unlist(expdata[i,]) ~ time, data = expdata, span = smoothvalue, na.action = na.exclude)
smoothed <- predict(test)
output[i,] <- smoothed
}
View(output)
plot(time, expdata[5,])
points(time, output[5,], pch = 16)
View(expdata)
fftimpute <- function(expdata, times){
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
#build list of new timepoints to impute
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
#build matrix of new timepoints to impute
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
row(spacer) <- row(expdata)
spacer[1,] <- newtimes
#bind new times to existing data, sort by Time
fulltimecourse <- cbind(timecourse, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
for(i in 1:nrow(expdata)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(timecourse[i,])
fulltimecourse[i,] <- Re(imputedcourse)
}
nameframe <- colnames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimecourse[1,]
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
for(i in 1:ncol(nameframe)){
nameframe[1,i] <- paste(prefix, nameframe[i,2], "hpi", suffix, sep = "")
}
colnames(fulltimecourse) <- nameframe$nameframe
fulltimecourse
}
test7 <- fftimpute(test6, testtime)
test6 <- lSmooth(test5, testtime)
test <- as.matrix(read.csv("NF54.csv", stringsAsFactors = F, row.names = 1))
test2 <- getAverages(test)
devtools::document()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
library(devtools)
document()
browseVignettes("dplyr")
install.packages("Rtools")
library(PFExpTools)
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
library(PFExpTools)
R CMD Rd2pdf PFExpTools
r CMD check
R CMD check
CMD check
check
build_manual()
library(devtools)
build_manual("PFExpTools")
build_manual()
R.version.string
use_package()
use_package("PFExpTools.Rproj")
use_package("PFExpTools")
library(PFExpTools)
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/CHAPTER 2 - Timecourse Work/PART 1 - Timecourse Analysis Pipeline")
test <- as.matrix(read.csv("NF54.csv", stringsAsFactors = F, row.names = 1))
test2 <- getAverages(test)
test3 <- logtransform(test, test2)
test4 <- remLowCoverage(test3, 0.75)
test5 <- tcImpute(test4, 5)
testtime <- as.matrix(test[1,])
test6 <- lSmooth(test5, testtime)
test7 <- fftimpute(test6, testtime)
fftimpute <- function(expdata, times){
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
#build list of new timepoints to impute
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
#build matrix of new timepoints to impute
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
#bind new times to existing data, sort by Time
fulltimecourse <- cbind(timecourse, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
for(i in 1:nrow(expdata)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(timecourse[i,])
fulltimecourse[i,] <- Re(imputedcourse)
}
nameframe <- colnames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimecourse[1,]
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
for(i in 1:ncol(nameframe)){
nameframe[1,i] <- paste(prefix, nameframe[i,2], "hpi", suffix, sep = "")
}
colnames(fulltimecourse) <- nameframe$nameframe
fulltimecourse
}
test7 <- fftimpute(test6, testtime)
fftimpute <- function(expdata, times){
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
#build list of new timepoints to impute
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
#build matrix of new timepoints to impute
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
#bind new times to existing data, sort by Time
fulltimecourse <- cbind(timecourse, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
for(i in 1:nrow(expdata)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[i,])
fulltimecourse[i,] <- Re(imputedcourse)
}
nameframe <- colnames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimecourse[1,]
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
for(i in 1:ncol(nameframe)){
nameframe[1,i] <- paste(prefix, nameframe[i,2], "hpi", suffix, sep = "")
}
colnames(fulltimecourse) <- nameframe$nameframe
fulltimecourse
}
test7 <- fftimpute(test6, testtime)
View(test)
fftimpute <- function(expdata, times){
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
#build list of new timepoints to impute
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
#build matrix of new timepoints to impute
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
#bind new times to existing data, sort by Time
fulltimecourse <- cbind(expdata, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
for(i in 1:nrow(expdata)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[i,])
fulltimecourse[i,] <- Re(imputedcourse)
}
nameframe <- colnames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimecourse[1,]
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
for(i in 1:ncol(nameframe)){
nameframe[1,i] <- paste(prefix, nameframe[i,2], "hpi", suffix, sep = "")
}
colnames(fulltimecourse) <- nameframe$nameframe
fulltimecourse
}
test7 <- fftimpute(test6, testtime)
expdata <- test6
times <- testtime
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
View(spacer)
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
fulltimecourse <- cbind(expdata, spacer)
View(fulltimecourse)
View(testtime)
expdata <- rbind(t(times), expdata)
View(expdata)
rownames(expdata)[1] <- "Time"
fulltimecourse <- cbind(expdata, spacer)
fftimpute <- function(expdata, times){
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
expdata <- rbind(t(times), expdata)
rownames(expdata)[1] <- "Time"
#build list of new timepoints to impute
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
#build matrix of new timepoints to impute
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
#bind new times to existing data, sort by Time
fulltimecourse <- cbind(expdata, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
for(i in 1:nrow(expdata)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[i,])
fulltimecourse[i,] <- Re(imputedcourse)
}
nameframe <- colnames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimecourse[1,]
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
for(i in 1:ncol(nameframe)){
nameframe[1,i] <- paste(prefix, nameframe[i,2], "hpi", suffix, sep = "")
}
colnames(fulltimecourse) <- nameframe$nameframe
fulltimecourse
}
test7 <- fftimpute(test6, testtime)
expdata <- test6
times <- testtime
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
expdata <- rbind(t(times), expdata)
rownames(expdata)[1] <- "Time"
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
fulltimecourse <- cbind(expdata, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
View(fulltimecourse)
for(i in 1:nrow(expdata)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[i,])
fulltimecourse[i,] <- Re(imputedcourse)
}
length(fulltimecourse[i,])
View(fulltimecourse)
imputedcourse <- imputedcourse / length(expdata[,i])
fftimpute <- function(expdata, times){
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
expdata <- rbind(t(times), expdata)
rownames(expdata)[1] <- "Time"
#build list of new timepoints to impute
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
#build matrix of new timepoints to impute
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
#bind new times to existing data, sort by Time
fulltimecourse <- cbind(expdata, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
for(i in 1:nrow(expdata)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[,i])
fulltimecourse[i,] <- Re(imputedcourse)
}
nameframe <- colnames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimecourse[1,]
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
for(i in 1:ncol(nameframe)){
nameframe[1,i] <- paste(prefix, nameframe[i,2], "hpi", suffix, sep = "")
}
colnames(fulltimecourse) <- nameframe$nameframe
fulltimecourse
}
test7 <- fftimpute(test6, testtime)
library(PFExpTools)
source('C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/testtt.R', echo=TRUE)
expdata <- test6
times <- testtime
firstsample <- min(times)
fulltimes <- firstsample:(max(times)+firstsample-1)
expdata <- rbind(t(times), expdata)
rownames(expdata)[1] <- "Time"
newtimes <- subset(fulltimes,  !(fulltimes %in% times))
spacer <- matrix(data = NA, ncol = length(newtimes), nrow = nrow(expdata))
rownames(spacer) <- rownames(expdata)
spacer[1,] <- newtimes
fulltimecourse <- cbind(expdata, spacer)
fulltimecourse <- fulltimecourse[,order(fulltimecourse[1,])]
fulltimecourse <- apply(fulltimecourse, 1, unlist)
View(fulltimecourse)
for(i in 1:nrow(fulltimecourse)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[,i])
fulltimecourse[i,] <- Re(imputedcourse)
}
for(i in 1:ncol(fulltimecourse)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[,i])
fulltimecourse[,i] <- Re(imputedcourse)
}
View(fulltimecourse)
View(expdata)
for(i in 1:ncol(fulltimecourse)){
origfft <- fft(unname(expdata[i,]))
numtimepoints <- ncol(expdata)
if(numtimepoints %% 2 == 0){
spacedfft <- c(origfft[1:(numtimepoints/2)], rep(0,numtimepoints), origfft[((numtimepoints/2)+1):numtimepoints])
}else{
spacedfft <- c(origfft[1:(floor(numtimepoints)/2)], rep(0,numtimepoints), origfft[ceiling(numtimepoints/2):numtimepoints])
}
imputedcourse <- fft(spacedfft, inverse = T)
imputedcourse <- imputedcourse / length(expdata[i,])
fulltimecourse[,i] <- Re(imputedcourse)
}
View(fulltimecourse)
nameframe <- rownames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimecourse[1,]
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
nameframe[,2] <- fulltimes
View(nameframe)
nameframe <- rownames(fulltimecourse)
nameframe <- as.data.frame(nameframe, stringsAsFactors = F)
nameframe[,2] <- fulltimes
View(nameframe)
prefix <- str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- str_extract(nameframe[1,1], "[0-9]*_1")
library(stringr)
prefix <- stringr::str_extract(nameframe[1,1], "[A-Z]*[0-9]*[A-Z]*_")
suffix <- stringr::str_extract(nameframe[1,1], "[0-9]*_1")
for(i in 1:nrow(nameframe)){
nameframe[i,1] <- paste(prefix, nameframe[i,2], "hpi", suffix, sep = "")
}
View(nameframe)
View(fulltimecourse)
rownames(fulltimecourse) <- nameframe$nameframe
View(fulltimecourse)
fulltimecourse <- t(fulltimecourse)
test7 <- fftimpute(test6, testtime)
library(PFExpTools)
test7 <- fftimpute(test6, testtime)
View(fulltimecourse)
test <- as.matrix(read.csv("NF54.csv", stringsAsFactors = F, row.names = 1))
test2 <- getAverages(test)
test3 <- logtransform(test, test2)
test4 <- remLowCoverage(test3, 0.75)
test5 <- tcImpute(test4, 5)
testtime <- as.matrix(test[1,])
test6 <- lSmooth(test5, testtime)
test7 <- fftimpute(test6, testtime)
View(test7)
plot(2:57, test7["PF3D7_1343700",])
points(testtime, test6["PF3D7_1343700",])
points(testtime, test6["PF3D7_1343700",], pch = 16)
points(testtime, test5["PF3D7_1343700",])
points(testtime, test5["PF3D7_1343700",], pch = 19)
points(testtime, test5["PF3D7_1343700",], pch = 19, col = "red")
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
document()
help("PFExpTools")
??PFExpTools
library(PFExpTools)
library(PFExpTools)
library(PFExpTools)
library(PFExpTools)
build_manual("PFExpTools")
build_manual()
use_vignette("PFExpTools")
Rd2pdf
texi2pdf
PATH
build_manual()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
library(devtools)
build_manual()
build_manual()
library(devtools)
build_manual()
build_manual()
build_manual()
build_manual()
build_manual()
library(PFExpTools)
library(PFExpTools)
build_manual()
devtools::build_manual()
devtools::build_manual()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/CHAPTER 2 - Timecourse Work/PART 3 - Time Course Comparisons")
NF54 <- read.csv("NF54log2 imputed timecourse.csv", stringsAsFactors = F, row.names = 1)
View(NF54)
NF54 <- t(NF54)
View(NF54)
NF54 <- NF54[-1,]
NFGFP <- read.csv("NF54GFPlog2 imputed timecourse.csv", stringsAsFactors = F, row.names = 1)
NFGFP <- NFGFP[-1,]
NFGFP <- read.csv("NF54GFPlog2 imputed timecourse.csv", stringsAsFactors = F, row.names = 1)
NFGFP <- t(NFGFP)
NFGFP <- NFGFP[-1,]
samples <- NFGFP
reference <- NF54
commongenes <- intersect(rownames(samples), rownames(reference))
subset <- NA
if(!is.na(subset)){commongenes <- intersect(commongenes, subset)}
!is.na(subset)){commongenes <- intersect(commongenes, subset)
!(is.na(subset)){commongenes <- intersect(commongenes, subset)
!is.na(subset)
subtest <- read.csv("Safe Staging Genes.csv", stringsAsFactors = F, row.names = 1)
View(subtest)
subtest <- read.csv("Safe Staging Genes.csv", stringsAsFactors = F)
if(!is.na(subset)){commongenes <- intersect(commongenes, subset)}
subset <- subtest
if(!is.na(subset)){commongenes <- intersect(commongenes, subset)}
subset <- as.vector(subset)
commongenes <- intersect(rownames(samples), rownames(reference))
if(!is.na(subset)){commongenes <- intersect(commongenes, subset)}
commongenes <- intersect(rownames(samples), rownames(reference))
subset <- subtest[,1]
commongenes <- intersect(rownames(samples), rownames(reference))
if(!is.na(subset)){commongenes <- intersect(commongenes, subset)}
subset <- NA
commongenes <- intersect(rownames(samples), rownames(reference))
if(!is.na(subset)){commongenes <- intersect(commongenes, subset)}
View(samples)
samples <- samples[which(rownames(samples) %in% commongenes),]
subset <- subtest[,1]
commongenes <- intersect(rownames(samples), rownames(reference))
if(!is.na(subset)){commongenes <- intersect(commongenes, subset)}
samples <- samples[which(rownames(samples) %in% commongenes),]
reference <- reference[which(rownames(reference) %in% commongenes),]
correlations <- cor(data.matrix(samples), data.matrix(reference), use="pairwise.complete.obs", method=c("pearson"))
stages <- max.col(correlations)
row.names(stages) <- row.names(correlations)
stages <- as.data.frame(stages)
View(stages)
View(correlations)
row.names(stages) <- row.names(correlations)
View(stages)
plot(2:57, stages[,1])
heatmap(t(correlations), Colv=NA, Rowv=NA, labRow = T, xlab = "Sample Name", ylab = "Reference Timepoint (hpi)", margins = c(8,3))
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
