output <- matrix(nrow = nrow(expdata), ncol <- length(fulltimes))
View(output)
output <- matrix(nrow = nrow(expdata), ncol = length(fulltimes))
View(output)
rownames(output) <- rownames(expdata)
colnames(output) <- paste("hpi_", fulltimes, "")
View(output)
splinefit <- spline(expdata[i,], times)
splinefit(fulltimes)
splinefit$y(fulltimes)
splinefit$y
splinefit$x
splinefit <- spline(x=expdata[i,],y=times)
splinefit$y
View(expdata)
i <- 5
splinefit <- spline(x=expdata[i,],y=times)
splinefit <- spline(x=expdata[i,],y=times, xout = fulltimes)$y
splinefit <- spline(x=expdata[i,],y=times, xout = fulltimes)
splinefit$y
output <- matrix(nrow = nrow(expdata), ncol = length(fulltimes))
colnames(output) <- paste("hpi_", fulltimes, "")
rownames(output) <- rownames(expdata)
splinefit <- spline(x=expdata[i,],y=times, xout = fulltimes)
splinefit <- spline(y=expdata[i,],x=times)
splinefit <- spline(y=expdata[i,],x=times, xout = fulltimes)
plot(expdata["times"], expdata[5,])
View(expdata)
plot(expdata["times",], expdata[5,])
points(splinefit$x, splinefit$y, pch = 16)
library(PFExpTools)
test4 <- splineCourse(NFGFP)
library(PFExpTools)
View(NFGFP)
test4 <- splineCourse(NFGFP[-1,], NFGFP[1,], seq(1,48,0.25))
plot(seq(1,48,0.25), NFGFP["PF3D7_1343700",], pch = 16)
plot(seq(1,48,0.25), test4["PF3D7_1343700",], pch = 16)
devtools::build_manual()
library(devtools)
install_github(foster-gabe/PFExpTools)
install_github("foster-gabe/PFExpTools")
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/Current Curation")
install.packages("seqinr")
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/PfalExpTools Testing")
aliases <- read.table("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
View(nameChange)
read.delim("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
read.delim("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt", sep = " ")
aliases <- read.delim("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt", sep = " ")
View(aliases)
i <- 1
line <- strsplit(aliases[i], "\t")
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F)
aliasfilename <- "PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt"
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F)
line <- strsplit(aliases[i], "\t")
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
line <- strsplit(aliases[i], "\t")
View(aliases)
aliases[1]
aliases[[1]]
class(aliases)
aliases[1]
aliases[1,1]
aliases[1,2]
aliases[5,1]
line <- strsplit(aliases[i,1], "\t")
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
j <- 2
output <- rbind(output, c(line[[j]], line[[1]]))
line[[2]]
line[2]
line[1][2]
line[1]
line[[1]
]
class(line[1])
line <- unlist(strsplit(aliases[i,1], "\t"))
source('~/.active-rstudio-document', echo=TRUE)
output <- rbind(output, c(line[j], line[1]))
View(output)
View(aliases)
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
View(output)
unique(output[,1])
length(unique(output[,1]))
output <- output[which(!is.na(output[,1])),]
View(output)
output[,2] <-gsub(".[\d][1]", "")
output[,2] <-gsub(".[\\d][1]", "")
output[,2] <-gsub(output[,2],".[\\d][1]", "")
output[,2] <-apply(output[,2], function(x) {gsub(x,".[\\d][1]", ""})
}
output[,2] <-lapply(output[,2], function(x) {gsub(x,".[\\d][1]", ""})
}
output[,2] <-sapply(output[,2], function(x) {gsub(x,".[\\d][1]", ""})
}
output[,2] <-sapply(output[,2], function(x) {gsub(x,"\\.[\\d][1]", ""})
}
r
output[,2] <-sapply(output[,2], function(x) {gsub(x,"\\.[\\d][1]", ""})
}
r
output[,2] <-sapply(output[,2], function(x) {gsub(x,"\\.[\\d][1]", ""})
}
output[,2] <-sapply(output[,2], function(x) {gsub(x,"\\.[\\d][1]", "")})
View(output)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
output[,2] <-sapply(output[,2], function(x) {gsub(x,"\\.[\\d]{1}$", "")})
View(output)
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
bak <- output
output[,2] <-sapply(output[,2], function(x) {gsub(x,"\\..{1}$", "")})
output <- bak
output[,2] <-sapply(output[,2], function(x) {gsub(x,"\\.", "FART")})
output <- bak
output[,2] <-sapply(output[,2], function(x) {gsub("\\.", "FART",x)})
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "FART", x)})
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
output <- bak
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
output <- dplyr::distinct(output)
length(unique(test[,1]))
length(unique(output[,1]))
test <- output[which(!unique(output[,1])),]
View(output)
output <- output[which(output[,1] %in% unique(output[,1])),]
duplicated((output[,1]))
summary(duplicated(output[,1]))
output <- output[which(!duplicated(output[,1]),]
}
output <- output[which(!duplicated(output[,1])),]
View(output)
aliases <- output
test <- scan("GPL18893.txt", comment.char = "#")
test <- scan("GPL18893.txt", comment.char = "#", what = "character")
test <- scan("GPL18893.txt", comment.char = "#", what = "character", sep = "\t")
platform <- "GPL18893.txt"
platdata <- read.table(platform, skip = which.max(count.fields(platform)) -1)
platdata <- read.table(platform, skip = which.max(count.fields(platform)) -1)
platdata <- read.table(platform, skip = which.max(count.fields(platform))-1, header = T)
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T)
View(platdata)
platdata <- platdata[which(!is.na(platdata[,1])),]
View(platdata)
platdata[nrow(platdata,1)]
platdata[nrow(platdata),]
platdata[nrow(platdata),1]
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F)
platdata <- platdata[which(!is.na(platdata[,1])),]
View(platdata)
platdata[nrow(platdata),1]
length(patdata[nrow(platdata),1])
length(platdata[nrow(platdata),1])
platdata <- platdata[which(length(platdata[,1] > 1),]
if(method == "swap"){
output <- swapChange(platform)
} else if(method == "alias"){
if(!is.na(aliases)){
output <- aliasChange(platform, aliases)
}else{stop("No alias file provided for method alias")}
}else if(method == "blast"){
if(!is.na(transcripts)){
output <- blastChange(platform, transcripts, match, secmatch)
}else{stop("No transcript file provided for method blast")}
}else{stop("Invalid method provided, only supported methods are swap, alias and blast")}
output
}
aliasChange <- function(platform, aliases){
}
swapChange <- function(platform){
}
blastChange <- function(platform, transcripts, match, secmatch){
}
#' flattenAlias
#'
#' The alias file from PlasmoDB is unwieldy and awful. Here is a function for
#' flattening it for easier find and replace.
#'
#' @param aliasfilename File name of alias file obtained from PlasmoDB.
#'
#' @return Data frame with two columns; first column is old identifiers, and
#'   second column is their mapping to the most recent name (per the alias file)
#' @export
#'
#' @examples
flattenAlias <- function(aliasfilename){
#file is \t delim, with uneven numbers of columns which is a joy. We'll create
#a reverse flattened file here.
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
#Our output is close; it's still kind of a hot mess with alternative splicing
#and duplicates in here. Let's clean up as best we can.
#First, we're not catching any alternate splicing with these old probes so
#let's strip the splicing IDs
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
#collapse identical rows
output <- dplyr::distinct(output)
#some old genes are mapping to multiple new names; they need to be removed from our set.
output <- output[which(!duplicated(output[,1])),]
output
}
platdata <- platdata[which(length(platdata[,1] > 1)),]
platdata <- platdata[which(length(platdata[,1]) > 1),]
View(platdata)
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F)
platdata <- platdata[which(length(platdata[,1]) > 1),]
View(platdata)
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F)
View(platdata)
length(platdata[1,1])
nchar(platdata[1,1])
nchar(platdata[nrow(platdata),1])
platdata[nrow(platdata),1]
platdata <- platdata[which(grep("[a-zA-Z0-9]", platdata[,1]),]
if(method == "swap"){
output <- swapChange(platform)
} else if(method == "alias"){
if(!is.na(aliases)){
output <- aliasChange(platform, aliases)
}else{stop("No alias file provided for method alias")}
}else if(method == "blast"){
if(!is.na(transcripts)){
output <- blastChange(platform, transcripts, match, secmatch)
}else{stop("No transcript file provided for method blast")}
}else{stop("Invalid method provided, only supported methods are swap, alias and blast")}
output
}
aliasChange <- function(platform, aliases){
}
swapChange <- function(platform){
}
blastChange <- function(platform, transcripts, match, secmatch){
}
#' flattenAlias
#'
#' The alias file from PlasmoDB is unwieldy and awful. Here is a function for
#' flattening it for easier find and replace.
#'
#' @param aliasfilename File name of alias file obtained from PlasmoDB.
#'
#' @return Data frame with two columns; first column is old identifiers, and
#'   second column is their mapping to the most recent name (per the alias file)
#' @export
#'
#' @examples
flattenAlias <- function(aliasfilename){
#file is \t delim, with uneven numbers of columns which is a joy. We'll create
#a reverse flattened file here.
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
#Our output is close; it's still kind of a hot mess with alternative splicing
#and duplicates in here. Let's clean up as best we can.
#First, we're not catching any alternate splicing with these old probes so
#let's strip the splicing IDs
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
#collapse identical rows
output <- dplyr::distinct(output)
#some old genes are mapping to multiple new names; they need to be removed from our set.
output <- output[which(!duplicated(output[,1])),]
output
}
platdata <- platdata[which(grep("[a-zA-Z0-9]", platdata[,1])),]
platdata <- platdata[which(grepl("[a-zA-Z0-9]", platdata[,1])),]
platdata <- read.table(platform, skip = which.max(count.fields(platform)) - 1, sep = "\t",header = T, stringsAsFactors = F)
platdata <- platdata[which(grepl("[a-zA-Z0-9]", platdata[,1])),]
View(platdata)
View(output)
length(unique(platdata[,1]))
View(platdata)
View(aliases)
View(platdata)
output <- platdata[,c("ID", "ORF_old")]
View(output)
output <- output[which(nchar(output[,2]) > 1,]
}
swapChange <- function(platdata){
}
blastChange <- function(platdata, transcripts, match, secmatch){
}
#' flattenAlias
#'
#' The alias file from PlasmoDB is unwieldy and awful. Here is a function for
#' flattening it for easier find and replace.
#'
#' @param aliasfilename File name of alias file obtained from PlasmoDB.
#'
#' @return Data frame with two columns; first column is old identifiers, and
#'   second column is their mapping to the most recent name (per the alias file)
#' @export
#'
#' @examples
flattenAlias <- function(aliasfilename){
#file is \t delim, with uneven numbers of columns which is a joy. We'll create
#a reverse flattened file here.
aliases <- read.delim(aliasfilename, sep = " ", stringsAsFactors = F, header = F)
output <- as.data.frame(matrix(nrow = 1, ncol = 2))
for(i in 1:nrow(aliases)){
line <- unlist(strsplit(aliases[i,1], "\t"))
for(j in 2:length(line)){
output <- rbind(output, c(line[j], line[1]))
}
}
output <- output[which(!is.na(output[,1])),]
#Our output is close; it's still kind of a hot mess with alternative splicing
#and duplicates in here. Let's clean up as best we can.
#First, we're not catching any alternate splicing with these old probes so
#let's strip the splicing IDs
output[,2] <-sapply(output[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
#collapse identical rows
output <- dplyr::distinct(output)
#some old genes are mapping to multiple new names; they need to be removed from our set.
output <- output[which(!duplicated(output[,1])),]
output
}
output <- output[which(nchar(output[,2]) > 1),]
View(output)
View(aliases)
test <- setkey(aliases$V1, aliases$V2)
aliasvector <- aliases[,2]
names(aliasvector) <- aliases[,1]
aliasvector[1]
output[,3] <- lapply(output[,2], function(x) {aliasvector[x]})
aliasvector[output[2,1]]
aliasvector[output[2,2]]
output[,3] <- lapply(output[,2], function(x) {unname(aliasvector[x])})
View(output)
output[1,3]
output[1,2]
output[,3] <- sapply(output[,2], function(x) {unname(aliasvector[x])})
View(output)
output <- output[which(!is.na(output[,3])),]
View(output)
output <- output[,c(1,3)]
View(output)
colnames(output) <- c("OldID", "NewID")
colnames(output) <- c("Probe", "NewID")
colnames(output) <- c("Probe", "GeneID")
View(output)
View(aliases)
View(platdata)
View(platdata)
output <- platdata[,c("ID", "ORF")]
View(output)
devtools::install_github("mhahsler/rBLAST")
devtools::install_github("mhahsler/rBLAST")
BiocManager::install("Biostrings")
devtools::install_github("mhahsler/rBLAST")
dbcmd <- paste("makeblastdb -in", transcripts, "-dbtype nucl")
transcripts <- "PlasmoDB-36_Pfalciparum3D7_AnnotatedTranscripts.fasta"
dbcmd <- paste("makeblastdb -in", transcripts, "-dbtype nucl")
system2(dbcmd)
dbcmd
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/PfalExpTools Testing")
dbcmd <- paste("makeblastdb -in", transcripts, "-dbtype nucl")
system2(dbcmd)
system(dbcmd)
View(platdata)
test <- as.data.frame(t(platdata), stringsAsFactors = F)
View(test)
test <- test[1:2,]
View(test)
test <- unlist(test)
test <- as.data.frame(test)
View(test)
probes <- platdata
View(platdata)
probes <- platdata[,1:2]
View(probes)
probes[,1] <- gsub("^", "^>", probes[,1])
View(probes)
probes[,1] <- gsub("^", ">", probes[,1])
View(probes)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- unlist(t(probes))
View(probes)
probes <- unlist(as.data.frame(t(probes), stringsAsFactors = F))
probes
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
View(probes)
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
test <- as.data.frame(unlist(test))
View(test)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- as.data.frame(t(probes), stringsAsFactors = F)
test <- as.data.frame(unlist(test))
View(test)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
View(test)
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
test <- unlist(probes)
test <- as.data.frame(test)
View(test)
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- as.data.frame(t(probes), stringsAsFactors = F)
View(probes)
probes <- unlist(probes)
filename <- paste(platform, ".fasta", sep = "")
write.delim(filename, probes)
write.table(filename, probes)
probes <- platdata[,1:2]
probes[,1] <- gsub("^", ">", probes[,1])
probes <- as.data.frame(t(probes), stringsAsFactors = F)
probes <- as.data.frame(unlist(probes))
write.table(filename, probes)
write.table(probes, file = filename)
write.table(probes, file = filename, col.names = F, quote = F)
filename <- paste(gsub(".txt", "", platform), ".fasta", sep = "")
write.table(probes, file = filename, col.names = F, quote = F, row.names = F)
blastcmd <- paste("blastn -query", filename, "-db", transcripts, "-outfmt 10", sep = " ")
blastcmd
blastresults <- system(blastcmd)
system2(command = "makeblastdb", args = c("-in", transcripts, "-dbtype nucl"))
blastresults <- system2(command = "blastn", args = c("-query", filename,
"-db", transcripts,
"-outfmt", 10,
wait = T,
stdout = T))
blastresults <- system2(command = "blastn", args = c("-query", filename,
"-db", transcripts,
"-outfmt", 10),
wait = T,
stdout = T)
test <- read.table(textConnection(blastresults))
View(probes)
View(test)
test <- read.table(textConnection(blastresults), sep = ",")
View(test)
blastresults <- read.table(textConnection(blastresults), sep = ",")
blastresults <- blastresults[which(blastresults$V12 >= 60),]
View(blastresults)
duplicated(blastresults[,1])
blastresults <- blastresults[which(!duplicated(blastresults$V1)),]
length(unique(blastresults[,1]))
blastresults <- blastresults[which(blastresults$V12 >= match),]
blastresults$V12
match
match <- 130
blastresults <- blastresults[which(blastresults$V12 >= match),]
View(blastresults)
blastresults[,2] <-sapply(blastresults[,2], function(x) {gsub("\\.\\d{1}$", "", x)})
output <- blastresults[,1:2]
colnames(output) <- c("Probe", "GeneID")
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/Mok Data/PfalExpTools Testing")
library(PFExpTools)
test <- nameChange("GPL18893.txt")
test <- nameChange("GPL18893.txt")
View(test)
output <- output[which(grepl("[a-zA-Z0-9]", output[,2])),]
library(PFExpTools)
test <- nameChange("GPL18893.txt")
View(test)
test <- nameChange("GPL18893.txt", method = "alias", aliases = "PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
aliases <- flattenAlias("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
aliases <- flattenAlias("PlasmoDB-9.3_Pfalciparum3D7_GeneAliases.txt")
test <- nameChange("GPL18893.txt", method = "alias", aliases = aliases)
View(test)
library(PFExpTools)
test <- nameChange("GPL18893.txt", method = "alias", aliases = aliases)
library(PFExpTools)
test <- nameChange("GPL18893.txt", method = "alias", aliases = aliases)
test <- nameChange("GPL18893.txt")
test <- nameChange("GPL18893.txt", method = "blast", transcripts = "PlasmoDB-36_Pfalciparum3D7_AnnotatedTranscripts.fasta")
View(test)
build_manual()
setwd("C:/Users/Gabe/Dropbox/Ferdig Lab/THESIS REANALYSES/PFExpTools")
build_manual()
